library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity mem_instr is
    Generic (DIM_MI : INTEGER := 256);          -- dimensiunea memoriei de instructiuni (cuvinte)
    Port ( Clk      : in  STD_LOGIC;
           Rst      : in  STD_LOGIC;
           Adr      : in  STD_LOGIC_VECTOR (7 downto 0);
           Data     : out STD_LOGIC_VECTOR (31 downto 0));
end mem_instr;

architecture Behavioral of mem_instr is
    type MI_TYPE is array (0 to DIM_MI-1) of STD_LOGIC_VECTOR (31 downto 0);
    signal MI : MI_TYPE := (
                      B"00001010_0000_0000_0000_000000000000",
                      B"00100010_0001_0000_0000000000101101",
                      B"00100010_0010_0000_0000000000100100",
                      B"01000000_0011_0000_0000000000000000",
                      B"00100010_0100_0000_0000000000010000",
                      B"00101000_0101_0010_0000000000000001",
                      B"01100101_0101_00000000000000000010",
                      B"00000010_0011_0011_0001_000000000000",
                      B"00001110_0001_0001_0000000000000001",
                      B"00001101_0010_0010_0000000000000001",
                      B"00100101_0100_0100_0000000000000001",
                      B"01010000_0100_11111111111111111000",
                      B"01000000_0000_0011_0000000000000000",
                      B"01101001_000000000000000000000000",
 

    begin
        process (Clk)
        begin
            if RISING_EDGE (Clk) then
                if (Rst = '1') then
                    Data <= (others => '0');
                else
                    Data <= MI (CONV_INTEGER (Adr));
                end if;
            end if;
        end process;
    end Behavioral;